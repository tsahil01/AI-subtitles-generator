// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  web3Address String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payments    Payment[]
  files       File[]
  contact     contact[]
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  amount        Int
  transactionId String        @unique
  status        paymentStatus
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  file          File?
}

model File {
  id            String          @id @default(cuid())
  name          String
  url           String
  type          String
  audioLanguage String
  key           String
  size          Int?
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  transactionId String          @unique
  user          User            @relation(fields: [userId], references: [id])
  transaction   Payment         @relation(fields: [transactionId], references: [transactionId])
  subtitles     SubtitlesFile[]
}

model SubtitlesFile {
  id                   String              @id @default(cuid())
  name                 String
  url                  String
  fileId               String              @unique
  transcriptionJobName String              @unique
  transcriptionStatus  transcriptionStatus @default(PENDING)
  file                 File                @relation(fields: [fileId], references: [id])
}

enum paymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum transcriptionStatus {
  PENDING
  SUCCESS
  FAILED
  IN_PROGRESS
}

model contact {
  id        String   @id @default(cuid())
  name      String
  userId    String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])  
}
